package org.opentestsystem.delivery.logging;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageListener;

import java.io.IOException;
import java.util.List;

/**
 * Registered in spring to listen to amqp messages on the "springCloudBus" topic.
 * An anonymous queue is created and bound to the topic.
 *
 * When spring cloud config server detects a change in configuration, it sends a message
 * to the "springCloudBus" topic.
 *
 * When the message is received, the logback configuration is reloaded
 * from the centralized spring cloud config server.
 */
public class ConfigRefreshListener implements MessageListener {
  private static final Logger logger = LoggerFactory.getLogger(ConfigRefreshListener.class);

  private final LoggingConfigRefresher loggingConfigRefresher;
  private final ObjectMapper objectMapper;

  public ConfigRefreshListener(LoggingConfigRefresher loggingConfigRefresher, ObjectMapper objectMapper) {
    this.loggingConfigRefresher = loggingConfigRefresher;
    this.objectMapper = objectMapper;
  }

  @Override
  public void onMessage(final Message message) {
    try {
      final List<String> type = objectMapper.readTree(message.getBody()).findValuesAsText("type");
      if (type.contains("RefreshRemoteApplicationEvent")) {
        loggingConfigRefresher.refreshLoggerConfig();
      }
    } catch (IOException e) {
      logger.warn("Exception while parsing refresh application configuration event", e);
    }
  }
}
