package org.opentestsystem.delivery.logging;

import com.google.auto.value.AutoValue;
import com.google.common.base.Optional;
import org.opentestsystem.delivery.logging.EventLogger.EventData;

import java.util.Map;

@AutoValue
/**
 * Event to be logged to central logging
 * Used to simplify the number of parameters sent to the logger
 */
public abstract class EventInfo {

  /**
   * @return Name of the current event
   */
  abstract String event();

  /**
   * @return Moment in time of the event, such as the entry, exit or error
   */
  abstract Optional<String> checkpoint();

  /**
   * @return Optional message for the event
   */
  abstract Optional<String> message();

  /**
   * @return Event data payload that is used to access the event from log files
   */
  abstract Map<EventData, Object> data();

  public static EventInfo create(String event, String checkpoint, String message, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.of(checkpoint))
      .message(Optional.of(message))
      .data(data)
      .build();
  }

  public static EventInfo create(String event, String checkpoint, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.of(checkpoint))
      .message(Optional.<String>absent())
      .data(data)
      .build();
  }

  public static EventInfo create(String event, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.<String>absent())
      .message(Optional.<String>absent())
      .data(data)
      .build();
  }

  public static Builder builder() {
    return new AutoValue_EventInfo.Builder();
  }

  abstract Builder toBuilder();

  /**
   * Copy of this EventInfo with checkpoint changed
   *
   * @param checkpoint new value of checkpoint
   * @return Copy of this EventInfo with a new checkpoint
   */
  public EventInfo withCheckpoint(String checkpoint) {
    return toBuilder().checkpoint(Optional.of(checkpoint)).build();
  }

  /**
   * Copy of this EventInfo with message changed
   *
   * @param message new value of message
   * @return Copy of this EventInfo with a new message
   */
  public EventInfo withMessage(String message) {
    return toBuilder().message(Optional.of(message)).build();
  }

  @AutoValue.Builder
  public abstract static class Builder {
    public abstract Builder event(String event);

    public abstract Builder checkpoint(Optional<String> checkpoint);

    public abstract Builder message(Optional<String> message);

    public abstract Builder data(Map<EventData, Object> data);

    public abstract EventInfo build();
  }
}
