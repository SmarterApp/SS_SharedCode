package org.opentestsystem.delivery.logging;

import com.google.auto.value.AutoValue;
import com.google.common.base.Optional;
import org.opentestsystem.delivery.logging.EventLogger.EventData;

import java.util.Map;

@AutoValue
public abstract class EventInfo {

  abstract String event();

  abstract Optional<String> checkpoint();

  abstract Optional<String> message();

  abstract Map<EventData, Object> data();

  public static EventInfo create(String event, String checkpoint, String message, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.of(checkpoint))
      .message(Optional.of(message))
      .data(data)
      .build();
  }

  public static EventInfo create(String event, String checkpoint, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.of(checkpoint))
      .message(Optional.<String>absent())
      .data(data)
      .build();
  }

  public static EventInfo create(String event, Map<EventData, Object> data) {
    return builder()
      .event(event)
      .checkpoint(Optional.<String>absent())
      .message(Optional.<String>absent())
      .data(data)
      .build();
  }

  public static Builder builder() {
    return new AutoValue_EventInfo.Builder();
  }

  abstract Builder toBuilder();

  public EventInfo withCheckpoint(String checkpoint) {
    return toBuilder().checkpoint(Optional.of(checkpoint)).build();
  }

  @AutoValue.Builder
  public abstract static class Builder {
    public abstract Builder event(String event);

    public abstract Builder checkpoint(Optional<String> checkpoint);

    public abstract Builder message(Optional<String> message);

    public abstract Builder data(Map<EventData, Object> data);

    public abstract EventInfo build();
  }
}
