package org.opentestsystem.delivery.logging;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;


import java.util.HashMap;
import java.util.Map;

import static java.lang.String.format;

/**
 * Centralized event logger.
 */
public class EventLogger {
    private static final Logger logger = LoggerFactory.getLogger(EventLogger.class);
    private static final Marker marker = MarkerFactory.getMarker("event-logger");
    private static final ObjectWriter writer = new ObjectMapper().writer();

    private static final String APP = "app";
    private static final String SUB_EVENT = "sub_event";

    /**
     * Log events to centralized logging.
     *
     * These events are intended to be sent to a logstash server and searchable using elastic search.
     *
     * @param event name of the event occurring
     * @param fields additional event data to send for use in searching
     */
    public static void log(final String app, final String event, final Map<String, Object> fields) {
        try {
            fields.put("app", app);
            logger.info(marker, format("EVENT:%s JSON:({\"event_data\": %s})", event, writer.writeValueAsString(fields)));
        } catch (Exception e) {
            logger.warn(marker, format("exception occurred while logging event: %s", event), e);
        }
    }

    public static void log(final String app, final String event, final String subEvent, final Map<String, Object> fields) {
        Map<String, Object> newFields = new HashMap<>();
        newFields.putAll(fields);
        newFields.put(APP, app);
        newFields.put(SUB_EVENT, subEvent);

        log(event, newFields);
    }

    private static void log(final String event, final Map<String, Object> fields) {
        try {
            logger.info(marker, format("EVENT:%s JSON:({\"event_data\": %s})", event, writer.writeValueAsString(fields)));
        } catch (Exception e) {
            logger.warn(marker, format("exception occurred while logging event: %s", event), e);
        }
    }

    public static void error(final String app, final String event, final Map<String, Object> fields, final Exception e) {
        Map<String, Object> newFields = new HashMap<>();
        newFields.putAll(fields);
        newFields.put(APP, app);

        error(event, newFields);
    }

    private static void error(final String event, final Map<String, Object> fields) {
        try {
            logger.error(marker, format("EVENT:%s JSON:({\"event_data\": %s})", event, writer.writeValueAsString(fields)));
        } catch (Exception e) {
            logger.error(marker, format("exception occurred while error event: %s", event), e);
        }
    }
}
