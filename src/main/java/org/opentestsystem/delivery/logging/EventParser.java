package org.opentestsystem.delivery.logging;

import com.google.common.base.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.delivery.logging.EventLogger.BaseEventData.HTTP_REQUEST_PARAMETERS;
import static org.opentestsystem.delivery.logging.EventLogger.BaseEventData.HTTP_SESSION_ID;

/**
 * Map interceptor request to EventInfo value object used to log event.
 * Common fields such a http session and request parameters are stored in the returned EventInfo
 */
public class EventParser {

  /**
   * The default pre request parser.
   *
   * @param request
   * @return
   */
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, final Object handler, final EventLogger logger) {
    return Optional.of(EventInfo.create(request.getPathInfo(), getEventDataFields(request)));
  }

  /**
   * The default post request parser.
   *
   * @param request
   * @return
   */
  public Optional<EventInfo> parsePostHandle(final HttpServletRequest request, final HttpServletResponse response, final Object
    handler, EventLogger logger) {
    return Optional.of(EventInfo.create(request.getPathInfo(), getEventDataFields(request)));
  }

  public static Map<EventLogger.EventData, Object> getEventDataFields(final HttpServletRequest request) {
    final HashMap<EventLogger.EventData, Object> data = new HashMap<>();

    final HttpSession session = request.getSession(false);
    if (null != session) {
      data.put(HTTP_SESSION_ID, session.getId());
    }
    data.put(HTTP_REQUEST_PARAMETERS, request.getParameterMap());

    return data;
  }
}

