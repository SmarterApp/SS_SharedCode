package org.opentestsystem.delivery.logging;

import com.google.common.base.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import static org.opentestsystem.delivery.logging.EventLogger.EventDataKey.HTTP_REQUEST_UUID;
import static org.opentestsystem.delivery.logging.EventLogger.EventDataKey.HTTP_SESSION_ID;


public class EventParser {

  /**
   * The default pre request parser.
   *
   * @param request
   * @return
   */
  public Optional<EventInfo> parsePreHandle(HttpServletRequest request) {
    return Optional.of(EventInfo.create(request.getPathInfo(), getEventDataFields(request)));
  }

  /**
   * The default post request parser.
   *
   * @param request
   * @return
   */
  public Optional<EventInfo> parsePostHandle(HttpServletRequest request, HttpServletResponse response) {
    return Optional.of(EventInfo.create(request.getPathInfo(), EventLogger.Checkpoint.EXIT.name(), getEventDataFields(request)));
  }

  protected Map<EventLogger.IEventData, Object> getEventDataFields(HttpServletRequest request) {
    HashMap<EventLogger.IEventData, Object> data = new HashMap<>();

    HttpSession session = request.getSession(false);
    if (null != session) {
      data.put(HTTP_SESSION_ID, session.getId());
    }

    Object uuid = request.getAttribute(HTTP_REQUEST_UUID.name());
    if (null == uuid) {
      request.setAttribute(HTTP_REQUEST_UUID.name(), UUID.randomUUID().toString());
    }
    data.put(HTTP_REQUEST_UUID, request.getAttribute(HTTP_REQUEST_UUID.name()).toString());
    return data;
  }
}

