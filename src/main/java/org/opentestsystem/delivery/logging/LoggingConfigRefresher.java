package org.opentestsystem.delivery.logging;

import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.core.joran.spi.JoranException;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.MalformedURLException;
import java.net.URL;

/**
 * Operation to reload logback configuration from the centralized spring cloud config server.
 * @see <a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html">spring cloud config server</a>
 *
 * The config server is specified by the environment variable CONFIG_SERVICE_URL and defaults to http://localhost:8888.
 * If the config server is not running, the local logback logging configuration is used.
 *
 * The configuration file loaded from the config server is named logback-${app.context.name}.xml.
 * The value of ${app.context.name} is defined in the local logback configuration file.
 * For example: <property scope="context" name="app.context.name" value="legacy-app" />
 *
 * The current app, spring profile and label are sent to the config server for use in property value substitution.
 * The app is defined by the ${app.context.name} value.
 * The label is defined by the environment variable CONFIG_LABEL and defaults to "master".
 */
public class LoggingConfigRefresher {
  private static final Logger logger = LoggerFactory.getLogger(LoggingConfigRefresher.class);

  @Autowired
  private Environment environment;

  public void refreshLoggerConfig() {
    final String configUrl = environment.getProperty("CONFIG_SERVICE_URL", "http://localhost:8888");
    if (StringUtils.isNotBlank(configUrl)) {
      final LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
      final String appName = context.getProperty("app.context.name");
      if (StringUtils.isNotBlank(appName)) {
        try {
          final UriComponents components = UriComponentsBuilder.fromUriString(configUrl).build();
          final UriComponentsBuilder builder;
          if (components.getHost() != null) {
            builder = UriComponentsBuilder.fromUriString(configUrl);
          } else {
            // add default http protocol if missing
            builder = UriComponentsBuilder.fromHttpUrl(String.format("http://%s", configUrl));
          }

          final String profiles = StringUtils.join(environment.getActiveProfiles(), ",");

          final String configLabel = environment.getProperty("CONFIG_LABEL", "master");

          builder.pathSegment(appName, profiles, configLabel, String.format("logback-%s.xml", appName));

          final URL springConfigURL = builder.build().toUri().toURL();

          final JoranConfigurator configurator = new JoranConfigurator();
          configurator.setContext(context);
          // Call context.reset() to clear any previous configuration, e.g. default
          // configuration. For multi-step configuration, omit calling context.reset().
          context.reset();
          configurator.doConfigure(springConfigURL);
        } catch (JoranException je) {
          // StatusPrinter will handle this
        } catch (MalformedURLException e) {
          logger.warn("Exception occurred while building url to spring-boot config server", e);
        }
      }
    }
  }
}
