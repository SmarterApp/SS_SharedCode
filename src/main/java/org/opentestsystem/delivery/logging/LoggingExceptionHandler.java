package org.opentestsystem.delivery.logging;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import javax.servlet.http.HttpServletRequest;

import static org.opentestsystem.delivery.logging.LoggingInterceptor.EVENT_INFO;
import static org.opentestsystem.delivery.logging.LoggingInterceptor.LOGGER_NAME;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;

@EnableWebMvc
@ControllerAdvice
/**
 * Common exception handler for event logging.
 * The exception is logged for the current event in progress.
 *
 * Called when unhandled exceptions in request mapping methods are thrown.
 */
public class LoggingExceptionHandler {
    private final static Logger LOG = LoggerFactory.getLogger(LoggingExceptionHandler.class);

    @ExceptionHandler
    @ResponseStatus(INTERNAL_SERVER_ERROR)
    public void handleExceptionFallback(final HttpServletRequest request, final Exception e) {
        LOG.error("Problem handling request", e);
        handleException(request, e);
    }

    /**
     * Send the exception to the EventLogger.
     *
     * @param request The request
     * @param e The exception
     */
    public static void handleException(final HttpServletRequest request, final Exception e) {
        final EventLogger logger = (EventLogger)request.getAttribute(LOGGER_NAME);
        if (logger != null) {
            EventInfo eventInfo = (EventInfo)request.getAttribute(EVENT_INFO);
            logger.error(eventInfo.withCheckpoint(EventLogger.Checkpoint.ERROR.name()), e);
        }
    }
}
