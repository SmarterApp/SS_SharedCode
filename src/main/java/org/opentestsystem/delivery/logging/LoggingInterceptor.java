/***************************************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2017 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 **************************************************************************************************/

package org.opentestsystem.delivery.logging;

import com.google.common.base.Optional;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.UUID;

import static org.opentestsystem.delivery.logging.EventLogger.BaseEventData.HTTP_REQUEST_UUID;
import static org.opentestsystem.delivery.logging.EventLogger.Checkpoint.ENTER;
import static org.opentestsystem.delivery.logging.EventLogger.Checkpoint.EXIT;

/**
 * Logs all http requests that are handled by methods with the {@link org.springframework.web.bind.annotation.RequestMapping @RequestMapping} annotation.
 *
 * Common http fields such as http session and request parameters are logged.
 * Custom fields can be added by implementing an EventParserFactory subclass and
 * injecting it via Spring configuration.
 */
public class LoggingInterceptor extends HandlerInterceptorAdapter {
  public static final String EVENT_INFO = "event-info";
  public static final String LOGGER_NAME = "event-logger";
  private static final String HTTP_REQUEST_UUID_NAME = "X-B3-TraceId";
  private final EventLogger logger;
  private final EventParserFactory factory;

  @Autowired
  public LoggingInterceptor(final EventParserFactory factory, final EventLogger logger) {
    this.factory = factory;
    this.logger = logger;
  }

  @Override
  public boolean preHandle(HttpServletRequest request,
                           HttpServletResponse response, Object handler) throws Exception {
    final EventParser parser = factory.get(request);
    final Optional<EventInfo> eventInfoOptional = parser.parsePreHandle(request, handler, logger);
    if (eventInfoOptional.isPresent()) {
      final EventInfo eventInfo = eventInfoOptional.get();
      UUID httpRequestUUID = Optional.fromNullable((UUID)logger.getField(HTTP_REQUEST_UUID.name())).or(UUID.randomUUID());
      MDC.put(HTTP_REQUEST_UUID_NAME, httpRequestUUID.toString().replace("-", ""));

      logger.trace(eventInfo.withCheckpoint(ENTER.name()));
      request.setAttribute(EVENT_INFO, eventInfo);
    }
    return true;
  }

  @Override
  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                         ModelAndView modelAndView) throws Exception {
    final EventParser parser = factory.get(request);
    final Optional<EventInfo> eventInfo = parser.parsePostHandle(request, response, handler, logger);
    if (eventInfo.isPresent()) {
      logger.trace(eventInfo.get().withCheckpoint(EXIT.name()));
    }
    MDC.clear();
  }
}
