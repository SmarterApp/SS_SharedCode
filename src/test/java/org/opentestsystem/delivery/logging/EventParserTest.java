/***************************************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2017 Regents of the University of California
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *
 * SmarterApp Open Source Assessment Software Project: http://smarterapp.org
 * Developed by Fairway Technologies, Inc. (http://fairwaytech.com)
 * for the Smarter Balanced Assessment Consortium (http://smarterbalanced.org)
 **************************************************************************************************/

package org.opentestsystem.delivery.logging;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.delivery.logging.EventLogger.BaseEventData.HTTP_REQUEST_PARAMETERS;
import static org.opentestsystem.delivery.logging.EventLogger.BaseEventData.HTTP_SESSION_ID;

public class EventParserTest {
    private final static Object HANDLER = new Object();

    private HttpServletRequest request;
    private EventLogger eventLogger;
    private HttpServletResponse response;
    private EventParser eventParser;

    @Before
    public void setup() {
        request = mock(HttpServletRequest.class);
        eventLogger = mock(EventLogger.class);
        response = mock(HttpServletResponse.class);

        eventParser = new EventParser();
    }

    @Test
    public void itShouldAddRequestPathInfo() {
        final String pathInfo = "/some/path";
        when(request.getPathInfo()).thenReturn(pathInfo);

        EventInfo info = eventParser.parsePreHandle(request, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.event()).isEqualTo(pathInfo);

        info = eventParser.parsePostHandle(request, response, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.event()).isEqualTo(pathInfo);
    }

    @Test
    public void itShouldHandleANullRequestPathInfo() {
        when(request.getPathInfo()).thenReturn(null);

        EventInfo info = eventParser.parsePreHandle(request, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.event()).isEmpty();

        info = eventParser.parsePostHandle(request, response, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.event()).isEmpty();
    }

    @Test
    public void itShouldOptionallyAppendSessionInfo() {
        when(request.getSession(false)).thenReturn(null);

        EventInfo info = eventParser.parsePreHandle(request, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).doesNotContainKey(HTTP_SESSION_ID);

        info = eventParser.parsePostHandle(request, response, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).doesNotContainKey(HTTP_SESSION_ID);

        final String sessionId = "sessionId";
        final HttpSession session = mock(HttpSession.class);
        when(session.getId()).thenReturn(sessionId);
        when(request.getSession(false)).thenReturn(session);

        info = eventParser.parsePreHandle(request, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).containsEntry(HTTP_SESSION_ID, sessionId);

        info = eventParser.parsePostHandle(request, response, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).containsEntry(HTTP_SESSION_ID, sessionId);
    }

    @Test
    public void itShouldAppendRequestParameters() {
        final Map<String, String[]> parameterMap = ImmutableMap.of(
            "key1", new String[]{"val1"},
            "key2", new String[]{"val2a", "val2b"});
        when(request.getParameterMap()).thenReturn(parameterMap);

        EventInfo info = eventParser.parsePreHandle(request, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).containsKey(HTTP_REQUEST_PARAMETERS);
        Map<String, String[]> infoValues = (Map<String, String[]>)info.data().get(HTTP_REQUEST_PARAMETERS);
        assertThat(infoValues).containsOnly(infoValues.entrySet().toArray(new Map.Entry[infoValues.entrySet().size()]));

        info = eventParser.parsePostHandle(request, response, HANDLER, eventLogger).orNull();
        assertThat(info).isNotNull();
        assertThat(info.data()).containsKey(HTTP_REQUEST_PARAMETERS);
        infoValues = (Map<String, String[]>)info.data().get(HTTP_REQUEST_PARAMETERS);
        assertThat(infoValues).containsOnly(infoValues.entrySet().toArray(new Map.Entry[infoValues.entrySet().size()]));
    }

}